var express = require("express")
var multer = require('multer')
var app = express()
var path = require('path')
var moment = require('moment');
var cDrive = require('./cDrive');
var fs = require('fs');
var Jimp = require("jimp");
var q = require("q");
var bodyParser = require("body-parser");

var load = multer({ dest: './uploads' });

var ejs = require('ejs')
app.set('view engine', 'ejs')

var uploadFolder = "./uploads";
var uploadThumbsFolder = "./uploads/thumbs/";

// configure the app to use bodyParser()
app.use(bodyParser.urlencoded({
    extended: true
}));

// Routing
app.get('/', function(req, res) {
    res.render('layout', {
        view: "index"
    })
})

app.get('/upload', function(req, res) {
    res.render('layout', {
        view: "upload"
    })
})

app.get('/gallery', function(req, res) {
    var files = [];
    fs.readdir(uploadThumbsFolder, (err, files) => {
        res.render('layout', {
            view: "gallery",
            files: files
        })
    })
})

app.get('/thanks', function(req, res) {
    res.render('thanks', {
        view: "thanks"
    })
})

app.get('/error', function(req, res) {
    res.render('layout', {
        view: "error"
    })
})

app.use('/css', express.static(__dirname + '/ressources/css'));
app.use('/scripts', express.static(__dirname + '/ressources/js'));
app.use('/uploads', express.static(__dirname + '/uploads'));
app.use('/thumbs', express.static(__dirname + '/uploads/thumbs'));

// Pfad wo die Uploads abgelegt werden definieren
var storage = multer.diskStorage({
    destination: function(req, file, callback) {
        callback(null, uploadFolder)
    },
    filename: function(req, file, callback) {

        var randomNumber = Math.floor((Math.random() * 100) + 1);

        callback(null, moment().format('YYYY-MM-DD_hh:mm:ss:SSS') + '-Hochzeit-#' + new Date() + "#" + path.extname(file.originalname))
    }
})

function createThumbs(files, callback) {

    var thumbReplace = /^uploads\//

    var thumbPath = uploadThumbsFolder + files[0].replace(thumbReplace, "");

    Jimp.read(files[0], function (err, thumb) {
        if (err) throw err;
        thumb.resize(256, Jimp.AUTO)            // resize
        .quality(60)                 // set JPEG quality
        .write(thumbPath); // save

        files.splice(0, 1);

        if (files.length > 0) {
            createThumbs(files);
        }
        else {
            return callback();
        }
    });
}

// upload parameter festlegen
// var upload = multer({
//     storage: storage,
//     fileFilter: function(req, file, callback) {
//         var ext = path.extname(file.originalname)
//         if (ext !== '.png' && ext !== '.jpg' && ext !== '.gif' && ext !== '.jpeg') {
//             return callback(res.end('Only images are allowed'), null)
//         }
//         callback(null, true)
//     }
// }).array('userFile', 99);

var upload = multer({
    storage: storage,
    fileFilter: function(req, file, callback) {
        var ext = path.extname(file.originalname)
        if (ext !== '.png' && ext !== '.jpg' && ext !== '.gif' && ext !== '.jpeg') {
            return callback(res.end('Only images are allowed'), null)
        }
        callback(null, true)
    }
});
var upload = multer({storage: storage});

// var storage =   multer.diskStorage({
//   destination: function (req, file, callback) {
//     callback(null, './uploads');
//   },
//   filename: function (req, file, callback) {
//     callback(null, file.fieldname + '-' + Date.now());
//   }
// });
//
// var upload = multer({ storage : storage}).single('userFile');
//
// function getFilesFromRequest(req, counter, callback) {
//     counter = counter != null ? counter : 0;
//     if (req.files == undefined) {
//         setTimeout(function() {
//             console.log(counter + " nochmal");
//             counter++;
//             getFilesFromRequest(req, counter);
//         }, 60);
//     }
//     else {
//         console.log("Fertig");
//
//         return callback(req);
//     }
//     return;
// }


// app.post('/uploada',function(req,res){
//     upload(req,res,function(err) {
//         if(err) {
//             return res.end("Error uploading file.");
//         }
//         console.log(req.file);
//         setTimeout(function() {
//
//             // var tFiles = req.files;
//             // console.log(tFiles.length);
//
//         }, 500)
//         res.end("File is uploaded");
//     });
// });

// app.post('/upload', upload.single('userFile'), function(req, res) {

// Dateien uploaden
// upload(req, res, function(err) {

// console.log(req.files)




// if (err != null) {
//     res.redirect('/error');
//     return;
// }
// console.log(req.files);

// if (files === undefined) {

// getFilesFromRequest(req, 0, function(request) {
//     console.log(request.files);
//     files = request.files;
//     return;
// })
// }
// else {
// res.end("Alle oben");
// }

// var tFiles = req.files;
// var uploadedFilePaths = [];
// var uploaderName = req.body.uploaderName != "undefined" ? req.body.uploaderName : "Anonymus";
// var replace = /#.*#/;
// var files = [];
//
//
// // Dateien umbenennen und Thumbs erstellen
// for (var i = 0; i < tFiles.length; i++) {
//
//     var newFilePath = tFiles[i].path.replace(replace, uploaderName);
//
//     // umbenennen
//     fs.rename(tFiles[i].path, newFilePath, function (err) {
//
//         if (err) {
//             console.log(err);
//             return;
//         }
//
//         // console.log('The file has been re-named to: ' + newFilePath);
//     });
//
//     files.push(newFilePath);
//
//     // thumbs erstellen danach zu gallery weiterleiten
//     if (files.length === tFiles.length) {
//         createThumbs(files, function() {
//             // res.redirect('/gallery');
//             // res.send("Alle oben");
//         })
//     }
//
// }
// cDrive.doUpload(uploadedFilePaths);
// })
// })
//
app.post('/uploaded', upload.array('userFile', 99), function(req, res) {

    var tFiles = req.files;
    var uploadedFilePaths = [];
    var uploaderName = req.body.uploaderName != "undefined" ? req.body.uploaderName : "Anonymus";
    var replace = /#.*#/;
    var files = [];

    // Dateien umbenennen und Thumbs erstellen
    for (var i = 0; i < tFiles.length; i++) {

        var newFilePath = tFiles[i].path.replace(replace, uploaderName);

        // umbenennen
        fs.rename(tFiles[i].path, newFilePath, function (err) {

            if (err) {
                console.log(err);
                return;
            }

            // console.log('The file has been re-named to: ' + newFilePath);
        });

        files.push(newFilePath);


        // res.send('{"success" : "Updated Successfully", "status" : 200}');
        // thumbs erstellen danach zu gallery weiterleiten
        if (files.length === tFiles.length) {
            createThumbs(files, function() {
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ a: 1 }));
                // return;
            })
        }

    }
    // cDrive.doUpload(uploadedFilePaths);
})

var port = 3000
app.listen(port, function() {
    console.log('Node.js listening on port ' + port)
})
